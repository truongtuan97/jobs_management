name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      
jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      masterdb:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: jobs_management
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d jobs_management"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      replicadb:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: jobs_management
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U user -d jobs_management"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:latest
        ports:
          - 6379:6379

      zookeeper:
        image: confluentinc/cp-zookeeper:7.2.1
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
        ports:
          - 2181:2181

      kafka:
        image: confluentinc/cp-kafka:7.2.1
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092

      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: example
        options: >-
          --name mongodb
          --health-cmd "echo 'db.runCommand({ ping: 1 })' | mongosh --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      RAILS_MASTER_KEY: ${{ secrets.RAILS_MASTER_KEY }}
      DATABASE_URL: postgres://user:password@localhost:5432/jobs_management
      DATABASE_READ_REPLICA_URL: postgres://user:password@localhost:5433/jobs_management
      REDIS_URL: redis://localhost:6379/1
      MONGODB_URI_TEST: "mongodb://root:example@localhost:27017/jobs_management_test?authSource=admin"

    steps:      
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3.0
          bundler-cache: true

      - name: Wait for databases to be ready
        run: |
          for i in {1..30}; do
            nc -z localhost 5432 && echo "MasterDB is up" && break
            echo "Waiting for MasterDB..."
            sleep 2
          done

          for i in {1..30}; do
            nc -z localhost 5433 && echo "ReplicaDB is up" && break
            echo "Waiting for ReplicaDB..."
            sleep 2
          done

      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            nc -z localhost 27017 && echo "MongoDB is up" && exit 0
            echo "Waiting for MongoDB..."
            sleep 2
          done
          echo "MongoDB did not start in time" && exit 1

      - name: Set up database
        run: |
          cp config/database.yml.ci config/database.yml
          bin/rails db:create db:migrate RAILS_ENV=test

      - name: Install dependencies
        run: bundle install

      - name: Run tests
        env:
          REDIS_URL: redis://localhost:6379/1
        run: bundle exec rspec
